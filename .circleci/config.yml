# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  aws-cli: circleci/aws-cli@2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build_and_test_back:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Install requirements
          command:
            sudo apt-get update;
            sudo apt install libmysqlclient-dev python3-dev;
            pip install --upgrade pip && pip install -r requirements.txt && pip install pylint
      - run:
          name: Format .py files
          command:
            pip install black && black $(git ls-files '*.py')
#      - run:
#          name: pylint
#          command:
#            pylint $(git ls-files '*.py')
  build_and_test_front:
    docker:
      - image: cimg/node:17.2.0
    steps:
      - checkout
      - run:  
          name: Update node.js
          command:
            npm install node.js@latest
      - run:
          name: Install dependencies
          command:
            npm install ./Frontend
      - run:
          name: unit_tests
          command:
            cd Frontend &&
            npm run test:unit
  deploy_frontend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID_FRONT
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_FRONT
      - run:
          name: deploy_frontend
          command: |
            sudo apt-get update
            
            # 1- Get the public IP of the current CircleCI runner
            PUBLIC_IP=$(curl ipinfo.io/ip)
            
            # 2- Add an ingress rule to the security group
            aws ec2 authorize-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID_FRONT \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24
            
            # 3- Give the ingress rule some time to propogate
            sleep 5
              
            # 4- SSH to the server to deploy and Perform steps to deploy
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS_FRONT 'cd GroupProject; 
            git pull --rebase;
            cd Frontend;
            tmux new-session -d -s "DUMMY";
            sleep 2
            tmux kill-server;
            tmux new-session -d -s "FRONTEND_SERVER";
            tmux send-keys -t FRONTEND_SERVER "npm run serve" C-m;
            exit'

            # 5- Remove the ingress rule
            aws ec2 revoke-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID_FRONT \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24

            echo DONE! Successfully deployed to Frontend EC2 server.

  deploy_backend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID_BACK
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY_BACK
      - run:
          name: deploy_back
          command: |
            sudo apt-get update
            
            # 1- Get the public IP of the current CircleCI runner
            PUBLIC_IP=$(curl ipinfo.io/ip)
            
            # 2- Add an ingress rule to the security group
            aws ec2 authorize-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID_BACK \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24
            
            # 3- Give the ingress rule some time to propogate
            sleep 5
              
            # 4- SSH to the server to deploy and Perform steps to deploy
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS_BACK 'cd GroupProject; 
            git pull --rebase;
            cd Backend;
            tmux new-session -d -s "DUMMY";
            sleep 2
            tmux kill-server;
            tmux new-session -d -s "BACKEND_SERVER";
            tmux send-keys -t BACKEND_SERVER "python3 manage.py runserver 0.0.0.0:8000" C-m;
            exit'

            # 5- Remove the ingress rule
            aws ec2 revoke-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID_BACK \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24

            echo DONE! Successfully deployed to Backend EC2 server.    

workflows:
  build_test_deploy:
    jobs:
      - build_and_test_back
      - build_and_test_front
      - deploy_frontend:
          requires:
            - build_and_test_back
            - build_and_test_front
          filters:
            branches:
              only:
                - main
      - deploy_backend:
          requires:
            - build_and_test_back
            - build_and_test_front
          filters:
            branches:
              only:
                - main
