# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  aws-cli: circleci/aws-cli@2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build_and_test_back:
    docker:
      - image: cimg/python:3.10.0
    steps:
      - checkout
      - run:
          name: Install requirements
          command:
            pip install --upgrade pip && pip install -r requirements.txt && pip install pylint
      - run:
          name: Format .py files
          command:
            pip install black && black $(git ls-files '*.py')
      - run:
          name: pylint
          command:
            pylint $(git ls-files '*.py')
  build_and_test_front:
    docker:
      - image: cimg/node:17.2.0
    steps:
      - checkout
      - run:  
          name: Update node.js
          command:
            npm install node.js@latest
      - run:
          name: Install dependencies
          command:
            npm install ./Frontend
      - run:
          name: unit_tests
          command:
            cd Frontend &&
            npm run test:unit
  deploy:
    docker:
      - image: cimg/python:3.10.0
    steps:
      - checkout
      - run:
          name: Deploy
          command: |
            sudo apt-get update
            sudo apt-get install python3-venv
            sudo ln -s /usr/bin/python3 /usr/bin/python
            
            # 1- Install AWS CLI
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            
            # 2- Get the public IP of the current CircleCI runner
            PUBLIC_IP=$(curl ipinfo.io/ip)
              
            # 3- Get AWS Region#
            # AWS_REGION=eu-central-1
            
            # 4- Get SG ID# TODO Don't forget to replace by your own SG ID
            SG_ID=sg-02a3bb4a42242d062
            aws configure list
            
            # 5- Add an ingress rule to the security group
            aws ec2 authorize-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24
            
            # 6- Give the ingress rule some time to propogate
            sleep 5
              
            # 7- SSH to the server to deploy
            EC2_USERNAME=ubuntu
            EC2_PUBLIC_DNS=ec2-52-59-142-241.eu-central-1.compute.amazonaws.com
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS 
            uptime && date && ls -a && exit

            # 8- Perform steps to deploy

            # cd GroupProject/
            # git pull --rebase
            echo nospoko
            # 9- Remove the ingress rule
            aws ec2 revoke-security-group-ingress \
            --region $AWS_DEFAULT_REGION \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr $PUBLIC_IP/24

            echo DONE!
      
workflows:
  build_test_deploy:
    jobs:
      - build_and_test_back
      - build_and_test_front
      - deploy:
          requires:
            - build_and_test_front
          filters:
            branches:
              only:
                - main
